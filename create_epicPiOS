#!/bin/bash
set -x

#
# This script creates a disk image of Raspbian that contains an
# additional recovery partition that can be used to reset a Raspbian
# installation back to 'factory fresh'
#
# This is an interactive script
#
# @mrpjevans
#
# Insipration: http://www.limepepper.co.uk/raspberry-pi/2018/04/15/Remote-factory-reset-for-raspberry-pi-2.html
#

# You really need to be root to do this
if [ "$EUID" -ne 0 ]
  then echo "Please run as root or sudo"
  exit
fi

cat << EOF
EpicPiOS Image Generator
========================

This is not an automated script. There are a few questions to answer
along the way and you're going to need plenty of disk space.

EOF

read -r -p "Continue? [Y/n] " response
if [[ "$response" =~ ^([nN][oO]|[nN])+$ ]]; then
    exit 0
fi

cat << EOF
INSTALL SOFTWARE
=================
EOF

apt update
apt install -y uuid-runtime parted curl unzip kpartx

cat << EOF
OK

cat << EOF
Download sorce images (download skipped if already present on disk)
===================================================================
You need to specify the download urls of the root and recovery image.
EOF

read -r -p "What is the url of the recovery os image? " RECOVERY_OS_URL
read -r -p "What is the url of the main os image? " MAIN_OS_URL

cat << EOF

recovery os download url: $RECOVERY_OS_URL
main os download url: $MAIN_OS_URL

Working Directory
=================
set workdir to ./tmp
EOF

WORKDIR="./tmp"
if [ ! -d $WORKDIR ]; then
  mkdir $WORKDIR
  if ! [ $? -eq 0 ]; then
      echo I couldn\'t create that directory, sorry.
      exit 0
  fi
fi


# ZIP filenames
RECOVERY_OS=${RECOVERY_OS_URL##*\/}
MAIN_OS=${MAIN_OS_URL##*\/}


# Filenames without extensions
RECOVERY_OS_BASE=${RECOVERY_OS%.*}
MAIN_OS_BASE=${MAIN_OS%.*}


# create hardlink with different name if recovery and main os are the same
if [ $RECOVERY_OS == $MAIN_OS ]; then
  RECOVERY_OS_BASE=${MAIN_OS_BASE}-recovery
  RECOVERY_OS=#{RECOVERY_OS_BASE}.zip
  if [ ! -f ./tmp/${MAIN_OS_BASE}-recovery.img ]; then
    ln ./tmp/$MAIN_OS_BASE.img ./tmp/${MAIN_OS_BASE}-recovery.img
  fi
fi

echo Target version for recovery partition is $RECOVERY_OS
echo Target version for root partition is $MAIN_OS

cat << EOF

Local Source Files
==================
EOF

# Do we have an zip? Lite
if [ ! -f "./tmp/$RECOVERY_OS_BASE.img" ]; then
  echo $RECOVERY_OS_BASE.img not found
  if [ ! -f "./tmp/$RECOVERY_OS" ]; then
    echo $RECOVERY_OS not found, downloading
    curl -L $RECOVERY_OS_URL > ./tmp/$RECOVERY_OS
  fi
  echo Unzipping $RECOVERY_OS
  unzip ./tmp/$RECOVERY_OS -d ./tmp
else
  echo $RECOVERY_OS_BASE.img found
fi

# Do we have an img? Full
if [ ! -f "./tmp/$MAIN_OS_BASE.img" ]; then
  echo $MAIN_OS_BASE.img not found
  if [ ! -f "./tmp/$MAIN_OS" ]; then
    echo $MAIN_OS not found, downloading
    curl -L $MAIN_OS_URL > ./tmp/$MAIN_OS
  fi
  echo Unzipping $MAIN_OS
  unzip ./tmp/$MAIN_OS -d ./tmp
else
  echo $MAIN_OS_BASE.img found
fi


 



# Sector calculations
cat << EOF

Sector calculations
===================
EOF

read -r -p "Make the image as small as possible or specify a sector size? [small] " response
if [ -z $response ] || [ $response == 'small' ];then 
  echo Making the smallest possible image size
  SECTORS=0
else
  echo Setting image to $response sectors
  SECTORS=$response
fi


FAT_LENGTH=$(fdisk -lu ./tmp/$RECOVERY_OS_BASE.img | grep .img1 | sed -n "s/ \+/ /gp" | cut -d ' ' -f 2)
PARTITION_1=$(fdisk -lu ./tmp/$RECOVERY_OS_BASE.img | grep .img1 | sed -n "s/ \+/ /gp" | cut -d ' ' -f 4)
LITE_ROOT_LENGTH=$(fdisk -lu ./tmp/$RECOVERY_OS_BASE.img | grep .img2 | sed -n "s/ \+/ /gp" | cut -d ' ' -f 4)
FULL_ROOT_LENGTH=$(fdisk -lu ./tmp/$MAIN_OS_BASE.img | grep .img2 | sed -n "s/ \+/ /gp" | cut -d ' ' -f 4)
PARTITION_2=$((LITE_ROOT_LENGTH+FULL_ROOT_LENGTH))

cat << EOF
FAT: $FAT_LENGTH sectors
Boot partition: $PARTITION_1 sectors
Raspbian Lite partition: $PARTITION_2 sectors
EOF

if [ "$SECTORS" -eq 0 ]; then
  PARTITION_3="$FULL_ROOT_LENGTH"
  SECTORS=$((FAT_LENGTH+PARTITION_1+PARTITION_2+FULL_ROOT_LENGTH))
  IMAGE_4MB=$((((SECTORS * 512) / 4194304) + 1))
else
  echo Calculating based on an available size of $SECTORS sectors
  PARTITION_3=$((SECTORS-PARTITION_2-PARTITION_1-FAT_LENGTH))
  IMAGE_4MB=$(((SECTORS * 512) / 4194304))
  if [ $PARTITION_3 -lt 1 ]; then
    echo Too few sectors, unable to continue
    exit 1
  fi
fi

IMAGE_BYTES=$((IMAGE_4MB * 4194304))

cat << EOF
Raspbian Full partition: $PARTITION_3 sectors
Total sectors: $SECTORS
Total bytes: $IMAGE_BYTES

EOF
read -r -p "OK to build the image? [Y/n] " response
if [[ "$response" =~ ^([nN][oO]|[nN])+$ ]]; then
    exit 0
fi

cat << EOF

Create target image
===================
Creating a blank image $SECTORS sectors / $IMAGE_BYTES bytes / $IMAGE_4MB 4MB blocks
EOF

dd if=/dev/zero bs=4M count=$IMAGE_4MB status=progress > ./tmp/$MAIN_OS_BASE.restore.img

UUID_RESTORE=$(uuidgen)
UUID_ROOTFS=$(uuidgen)
PARTUUID=$(tr -dc 'a-f0-9' < /dev/urandom 2>/dev/null | head -c8)
PARTITION_2_START=$((FAT_LENGTH + PARTITION_1))
PARTITION_3_START=$((PARTITION_2_START + PARTITION_2))

cat << EOF

Create partitions
=================
Restore: $UUID_RESTORE
Root: $UUID_ROOTFS
Volume ID: $PARTUUID

Creating partition table
Boot: start=${FAT_LENGTH}, size=${PARTITION_1}, type=c
Recovery: start=${PARTITION_2_START}, size=${PARTITION_2}, type=83
Root: start=${PARTITION_3_START}, size=${PARTITION_3}, type=83
EOF

sfdisk ./tmp/$MAIN_OS_BASE.restore.img <<EOF
label: dos
label-id: 0x${PARTUUID}
unit: sectors

$MAIN_OS_BASE.img1 : start=${FAT_LENGTH}, size=${PARTITION_1}, type=c
$MAIN_OS_BASE.img2 : start=${PARTITION_2_START}, size=${PARTITION_2}, type=83
$MAIN_OS_BASE.img3 : start=${PARTITION_3_START}, size=${PARTITION_3}, type=83
EOF

cat << EOF

Mount images as devices
=======================
EOF

losetup -v -f ./tmp/$MAIN_OS_BASE.restore.img
losetup -v -f ./tmp/$RECOVERY_OS_BASE.img
losetup -v -f ./tmp/$MAIN_OS_BASE.img

BLANK_IMAGE_LOOPDEV=$(losetup -a | grep loop | grep $MAIN_OS_BASE.restore.img | cut -d ' ' -f 1 | tr -dc '0-9')
kpartx -v -a /dev/loop$BLANK_IMAGE_LOOPDEV

RECOVERY_IMAGE_LOOPDEV=$(losetup -a | grep loop | grep $RECOVERY_OS_BASE.img | cut -d ' ' -f 1 | tr -dc '0-9')
kpartx -v -a /dev/loop$RECOVERY_IMAGE_LOOPDEV

MAIN_IMAGE_LOOPDEV=$(losetup -a | grep loop | grep $MAIN_OS_BASE.img | cut -d ' ' -f 1 | tr -dc '0-9')
kpartx -v -a /dev/loop$MAIN_IMAGE_LOOPDEV

cat << EOF
New image is device $BLANK_IMAGE_LOOPDEV
Lite image is device $RECOVERY_IMAGE_LOOPDEV
Full image is device $MAIN_IMAGE_LOOPDEV

Copy images
===========
Copying boot partition
EOF

dd if=/dev/mapper/loop${RECOVERY_IMAGE_LOOPDEV}p1 of=/dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p1 status=progress bs=4M
echo Copying Raspbian Lite to partition 2
dd if=/dev/mapper/loop${RECOVERY_IMAGE_LOOPDEV}p2 of=/dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2 status=progress bs=4M
echo Copying Raspbian Full to partition 3
dd if=/dev/mapper/loop${MAIN_IMAGE_LOOPDEV}p2 of=/dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p3 status=progress bs=4M

# This seems to be needed to let the system catch up
sleep 1

cat << EOF

Fix file systems
================
Setting IDs
EOF

tune2fs /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2 -U ${UUID_RESTORE}
e2label /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2 recoveryfs
tune2fs /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p3 -U ${UUID_ROOTFS}

echo Expanding recovery partition to full size
e2fsck -f /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2
resize2fs /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2

cat << EOF

Mount file systems
==================
EOF

mkdir -p tmp/mnt/restore_boot
mkdir -p tmp/mnt/restore_recovery
mkdir -p tmp/mnt/restore_rootfs

echo Mounting boot
mount /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p1 tmp/mnt/restore_boot
echo Mounting recovery
mount /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2 tmp/mnt/restore_recovery
echo Mounting rootfs
mount /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p3 tmp/mnt/restore_rootfs

sleep 1

echo
echo Set boot partition to new ID and partition 3
echo ============================================

sed -i -r "s/(PARTUUID=.*?\-02)/PARTUUID=${PARTUUID}-03/g" tmp/mnt/restore_boot/cmdline.txt
echo Done

echo
echo Fix fstabs
echo ==========

UUID_BOOT=$(blkid -o export /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p1 | egrep '^UUID=' | cut -d'=' -f2)
echo UUID for new image is $UUID_BOOT

echo Writing root fstab
cat << EOF > ./tmp/mnt/restore_rootfs/etc/fstab
proc                     /proc  proc    defaults          0       0
UUID=${UUID_BOOT}  /boot  vfat    defaults          0       2
UUID=${UUID_ROOTFS}  /      ext4    defaults,noatime  0       1
EOF

echo Writing recovery fstab
cat << EOF > ./tmp/mnt/restore_recovery/etc/fstab
proc                    /proc  proc    defaults          0       0
UUID=${UUID_BOOT}       /boot  vfat    defaults          0       2
UUID=${UUID_RESTORE}    /      ext4    defaults,noatime  0       1
EOF

cat << EOF
System image is now bootable. In order to automatically restore back
from the recovery partition, some scripts need to be added to the
boot partition and changes made to rc.local on both Lite and Full.
You can proceed without this but the restore process will have to be
done manually.

EOF

read -r -p "Shall I create the recovery scripts? [Y/n] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]] || [[ "$response" == "" ]]; then


echo
echo Create recovery scripts
echo ======================

echo copy firstrun.sh
cp firstrun.sh ./tmp/mnt/restore_boot/
chmod +x ./tmp/mnt/restore_boot/firstrun.sh
sed -i '1{s|$| systemd.run=/boot/firstrun.sh systemd.run_success_action=reboot systemd.unit=kernel-command-line.target|}' ./tmp/mnt/restore_boot/cmdline.txt
sed -i 's/#disable_overscan=1/disable_overscan=1/' ./tmp/mnt/restore_boot/config.txt


echo Creating boot_to_recovery
cat << EOF > ./tmp/mnt/restore_boot/boot_to_recovery
#!/bin/bash
if [ "\$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

echo Rebooting to recovery partition in 5 seconds

if [ "\$1" = "restore" ]; then
    echo Automatic restore selected
    touch /boot/restore
fi

sleep 5
sed -i 's/-03/-02/' /boot/cmdline.txt
touch /boot/ssh
reboot

exit 0
EOF

chmod +x ./tmp/mnt/restore_boot/boot_to_recovery

echo Creating boot_to_root
cat << EOF > ./tmp/mnt/restore_boot/boot_to_root
#!/bin/bash
if [ "\$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

echo Rebooting to root partition in 5 seconds
sleep 5
sed -i 's/-02/-03/' /boot/cmdline.txt
mv /boot/firstrun.done /boot/firstrun.sh
sed -i '1{s|$| systemd.run=/boot/firstrun.sh systemd.run_success_action=reboot systemd.unit=kernel-command-line.target|}' /boot/cmdline.txt
reboot
exit 0
EOF

chmod +x ./tmp/mnt/restore_boot/boot_to_root

echo Creating restore_root
cat << EOF > ./tmp/mnt/restore_boot/restore_root
#!/bin/bash
if [ -f "/boot/restore" ]; then
    echo Restoring rootfs
    dd if=/rootfs.img of=/dev/mmcblk0p3 conv=fsync status=progress bs=4M
    unlink /boot/restore
    /boot/boot_to_root
fi
exit 0
EOF

chmod +x ./tmp/mnt/restore_boot/restore_root

echo Creating check_restore_gpio
cat << EOF > ./tmp/mnt/restore_boot/check_restore_gpio.py
import os
from gpiozero import Button

button = Button(21)

if button.is_pressed:
    print("Restore button is pressed")
    os.system("/boot/boot_to_recovery restore")
else:
    print("Restore button is not pressed")
EOF

echo Scripts created, now modifying rc.locals
sed -i '$ i /boot/restore_root' ./tmp/mnt/restore_recovery/etc/rc.local
sed -i '$ i python3 /boot/check_restore_gpio.py' ./tmp/mnt/restore_rootfs/etc/rc.local

# End of create recovery scripts
fi

cat << EOF

Create backup image
===================
EOF

read -r -p "Shall I image the current root partition to recovery? [Y/n] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]] || [[ "$response" == "" ]]; then
dd if=/dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p3 of=./tmp/mnt/restore_recovery/rootfs.img status=progress bs=4M
fi

cat << EOF

Unmounting
==========
EOF

umount tmp/mnt/restore_boot
umount tmp/mnt/restore_recovery
umount tmp/mnt/restore_rootfs
sleep 1
kpartx -v -d /dev/loop${BLANK_IMAGE_LOOPDEV}
kpartx -v -d /dev/loop${RECOVERY_IMAGE_LOOPDEV}
kpartx -v -d /dev/loop${MAIN_IMAGE_LOOPDEV}
losetup --detach-all
echo Done

exit 0
