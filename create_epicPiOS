#!/bin/bash
set -e
set -x


# You really need to be root to do this
if [ "$EUID" -ne 0 ]
  then echo "Please run as root or sudo"
  exit
fi

# Install Software
apt update
apt install -y uuid-runtime parted curl unzip kpartx xz-utils fdisk

# Get Urls of used images
read -r -p "What is the url of the recovery os image? " RECOVERY_OS_URL
read -r -p "What is the url of the main os image? " MAIN_OS_URL

WORKDIR="./tmp"
if [ ! -d $WORKDIR ]; then
  mkdir $WORKDIR
  if ! [ $? -eq 0 ]; then
      echo I couldn\'t create that directory, sorry.
      exit 0
  fi
fi


# ZIP filenames
RECOVERY_OS=${RECOVERY_OS_URL##*\/}
MAIN_OS=${MAIN_OS_URL##*\/}


# Filenames without extensions
RECOVERY_OS_IMG=${RECOVERY_OS%.*}
RECOVERY_OS_BASE=${RECOVERY_OS_IMG%.*}
MAIN_OS_IMG=${MAIN_OS%.*}
MAIN_OS_BASE=${MAIN_OS_IMG%.*}


echo Target version for recovery partition is $RECOVERY_OS
echo Target version for root partition is $MAIN_OS

# Do we have an img for main os? otherwise download
if [ ! -f "./tmp/$MAIN_OS_BASE.img" ]; then
  echo $MAIN_OS_IMG not found
  if [ ! -f "./tmp/$MAIN_OS" ]; then
    echo $MAIN_OS not found, downloading
    curl -L $MAIN_OS_URL --output ./tmp/$MAIN_OS
  fi
  echo Unzipping $MAIN_OS
  unxz ./tmp/$MAIN_OS -c > ./tmp/$MAIN_OS_IMG
else
  echo $MAIN_OS_IMG found
fi

# create hardlink with different name if recovery and main os are the same
if [ $RECOVERY_OS == $MAIN_OS ]; then
  RECOVERY_OS_BASE=${MAIN_OS_BASE}-recovery
  RECOVERY_OS_IMG=${RECOVERY_OS_BASE}.img
  RECOVERY_OS=${RECOVERY_OS_IMG}.xz
  if [ ! -f ./tmp/${RECOVERY_OS_IMG} ]; then
    ln ./tmp/$MAIN_OS_IMG ./tmp/${RECOVERY_OS_IMG}
  fi
fi

 
# Do we have an img for recovery os? otherwise download
if [ ! -f "./tmp/$RECOVERY_OS_IMG" ]; then
  echo $RECOVERY_OS_IMG not found
  if [ ! -f "./tmp/$RECOVERY_OS" ]; then
    echo $RECOVERY_OS not found, downloading
    curl -L $RECOVERY_OS_URL --output ./tmp/$RECOVERY_OS
  fi
  echo Unzipping $RECOVERY_OS
  unxz ./tmp/$RECOVERY_OS -c > ./tmp/$RECOVERY_OS_IMG
else
  echo $RECOVERY_OS_BASE.img found
fi



calculate_partitions() {
  # calculate sizes in sectors
  RECOVERY_BOOT_START=$(fdisk -lu ./tmp/$RECOVERY_OS_BASE.img | grep .img1 |  tr -d \* | sed -n "s/ \+/ /gp" | cut -d ' ' -f 2)
  RECOVERY_BOOT_LENGTH=$(fdisk -lu ./tmp/$RECOVERY_OS_BASE.img | grep .img1 |  tr -d \* | sed -n "s/ \+/ /gp" | cut -d ' ' -f 4)

  MAIN_BOOT_START=$(fdisk -lu ./tmp/$MAIN_OS_BASE.img | grep .img1 |  tr -d \* | sed -n "s/ \+/ /gp" | cut -d ' ' -f 2)
  MAIN_BOOT_LENGTH=$(fdisk -lu ./tmp/$MAIN_OS_BASE.img | grep .img1 |  tr -d \* | sed -n "s/ \+/ /gp" | cut -d ' ' -f 2)
  
  RECOVERY_ROOT_LENGTH=$(fdisk -lu ./tmp/$RECOVERY_OS_BASE.img | grep .img2 |  tr -d \* | sed -n "s/ \+/ /gp" | cut -d ' ' -f 4)

  MAIN_ROOT_LENGTH=$(fdisk -lu ./tmp/$MAIN_OS_BASE.img | grep .img2 |  tr -d \* | sed -n "s/ \+/ /gp" | cut -d ' ' -f 4)


  PARTITION_1=$RECOVERY_BOOT_LENGTH
  PARTITION_1b=$MAIN_BOOT_LENGTH
  PARTITION_2=$((RECOVERY_ROOT_LENGTH+MAIN_ROOT_LENGTH))
  PARTITION_3=$MAIN_ROOT_LENGTH

  SECTORS=$((PARTITION_1+PARTITION_1b+PARTITION_2+PARTITION_3))
  IMAGE_4MB=$((((SECTORS * 512) / 4194304) + 1))
  
  IMAGE_BYTES=$((IMAGE_4MB * 4194304))
  
  dd if=/dev/zero bs=4M count=$IMAGE_4MB status=progress > ./tmp/$MAIN_OS_BASE.restore.img
  
  UUID_RESTORE=$(uuidgen)
  UUID_ROOTFS=$(uuidgen)
  PARTUUID=$(tr -dc 'a-f0-9' < /dev/urandom 2>/dev/null | head -c8)
  PARTITION_1_START=$RECOVERY_BOOT_START
  PARTITION_2_START=$((PARTITION_1_START + PARTITION_1))
  PARTITION_3_START=$((PARTITION_2_START + PARTITION_2))
}
calculate_partitions

# create partitions
sfdisk ./tmp/$MAIN_OS_BASE.restore.img <<EOF
label: dos
label-id: 0x${PARTUUID}
unit: sectors

$MAIN_OS_BASE.img1 : start=${PARTITION_1_START}, size=${PARTITION_1}, type=c
$MAIN_OS_BASE.img2 : start=${PARTITION_2_START}, size=${PARTITION_2}, type=83
$MAIN_OS_BASE.img3 : start=${PARTITION_3_START}, size=${PARTITION_3}, type=83
EOF


# Mount images as devices
losetup -v -f ./tmp/$MAIN_OS_BASE.restore.img
losetup -v -f ./tmp/$RECOVERY_OS_BASE.img
losetup -v -f ./tmp/$MAIN_OS_BASE.img

BLANK_IMAGE_LOOPDEV=$(losetup -a | grep loop | grep $MAIN_OS_BASE.restore.img | cut -d ' ' -f 1 | tr -dc '0-9')
kpartx -v -a /dev/loop$BLANK_IMAGE_LOOPDEV

RECOVERY_IMAGE_LOOPDEV=$(losetup -a | grep loop | grep $RECOVERY_OS_BASE.img | cut -d ' ' -f 1 | tr -dc '0-9')
kpartx -v -a /dev/loop$RECOVERY_IMAGE_LOOPDEV

MAIN_IMAGE_LOOPDEV=$(losetup -a | grep loop | grep $MAIN_OS_BASE.img | cut -d ' ' -f 1 | tr -dc '0-9')
kpartx -v -a /dev/loop$MAIN_IMAGE_LOOPDEV

# Copying boot partition
dd if=/dev/mapper/loop${RECOVERY_IMAGE_LOOPDEV}p1 of=/dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p1 status=progress bs=4M
echo Copying Raspbian Lite to partition 2
dd if=/dev/mapper/loop${RECOVERY_IMAGE_LOOPDEV}p2 of=/dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2 status=progress bs=4M
echo Copying Raspbian Full to partition 3
dd if=/dev/mapper/loop${MAIN_IMAGE_LOOPDEV}p2 of=/dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p3 status=progress bs=4M

# This seems to be needed to let the system catch up
sleep 5

# Setting IDs
tune2fs /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2 -U ${UUID_RESTORE}
e2label /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2 recoveryfs
e2fsck -y -f /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p3
tune2fs /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p3 -U ${UUID_ROOTFS}

# Expanding recovery partition to full size
e2fsck -pf /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2
resize2fs /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2

# mount filesystems
mkdir -p tmp/mnt/restore_boot
mkdir -p tmp/mnt/restore_recovery
mkdir -p tmp/mnt/restore_rootfs

echo Mounting boot
mount /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p1 tmp/mnt/restore_boot
echo Mounting recovery
mount /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p2 tmp/mnt/restore_recovery
echo Mounting rootfs
mount /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p3 tmp/mnt/restore_rootfs

sleep 1

# Set boot partition to new ID and partition 3
sed -i -r "s|(PARTUUID=.*?\-02)|/dev/mmcblk0p3|g" tmp/mnt/restore_boot/cmdline.txt
echo Done

# Fix fstabs
UUID_BOOT=$(blkid -o export /dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p1 | egrep '^UUID=' | cut -d'=' -f2)
# write fstab
cat << EOF > ./tmp/mnt/restore_rootfs/etc/fstab
proc                     /proc  proc    defaults          0       0
/dev/mmcblk0p1  /boot/firmware  vfat    defaults          0       2
/dev/mmcblk0p3  /      ext4    defaults,noatime  0       1
EOF

# Writing recovery fstab
cat << EOF > ./tmp/mnt/restore_recovery/etc/fstab
proc                    /proc  proc    defaults          0       0
/dev/mmcblk0p1       /boot/firmware  vfat    defaults          0       2
/dev/mmcblk0p2    /      ext4    defaults,noatime  0       1
EOF

# copy scripts 
cp custom.toml ./tmp/mnt/restore_boot/custom.toml.bak # used for recovery original script will be deleted after first boot

echo copy boot_to_recovery
cp boot_to_recovery ./tmp/mnt/restore_boot/

echo copy boot_to_root
cp boot_to_root ./tmp/mnt/restore_boot/

echo copy restore_root
cp restore_root ./tmp/mnt/restore_boot/

echo copy check_restore_gpio
cp check_restore_gpio.py ./tmp/mnt/restore_boot/

# modifying rc.locals
sed -i '$ i /boot/firmware/restore_root' ./tmp/mnt/restore_recovery/etc/rc.local
sed -i '$ i python3 /boot/firmware/check_restore_gpio.py' ./tmp/mnt/restore_rootfs/etc/rc.local

# Modify raspberry-pi-sys-mods
# needed to make the image compatible with new imager customisation feature
# backup firstrun.sh for reuse after recovery
sed -i '/^mount \/boot$/a cp /boot/firmware/firstrun.sh /boot/firmware/firstrun.bak' ./tmp/mnt/restore_rootfs/usr/lib/raspberrypi-sys-mods/firstboot
sed -i '/^mount "$FWLOC" -o rw$/a cp /boot/firmware/firstrun.sh /boot/firmware/firstrun.bak' ./tmp/mnt/restore_rootfs/usr/lib/raspberrypi-sys-mods/firstboot

# write image
dd if=/dev/mapper/loop${BLANK_IMAGE_LOOPDEV}p3 of=./tmp/mnt/restore_recovery/rootfs.img status=progress bs=4M

# unmounting ...
umount tmp/mnt/restore_boot
umount tmp/mnt/restore_recovery
umount tmp/mnt/restore_rootfs
sleep 1
kpartx -v -d /dev/loop${BLANK_IMAGE_LOOPDEV}
kpartx -v -d /dev/loop${RECOVERY_IMAGE_LOOPDEV}
kpartx -v -d /dev/loop${MAIN_IMAGE_LOOPDEV}
losetup --detach-all
echo Done
